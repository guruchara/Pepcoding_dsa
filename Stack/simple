class Solution {
    public boolean digit(char ch)
        {
             if(ch>='0' && ch<='9')
             {
                 return true;             
             }
             else
             {
                 return false;
             }
        
        }
 
     public boolean isoperator(char ch)
     {
         if(ch=='+' || ch=='-' || ch=='/' || ch=='*')
         {
             return true;             
         }
         else
         {
             return false;
         }
     }
    public int checkpriority(char ch)            
    {
        if(ch=='*' || ch=='/')
        {
            return 2;
        }
        else if(ch=='+' || ch=='-')
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    public int calculates(char ch,int v1, int v2)
    {
        if(ch=='+')
        {
            return v1+v2;
        }
        else if(ch=='-')
        {
            return v1-v2;
        }
        else if(ch=='*')
        {
            return v1*v2;
        }
        else if(ch=='/')
        {
            return v1/v2;
        }
        else
        {
            return 0;
        }
    }
       public int calculate(String str) {                
        
        Stack<Integer>operand=new Stack<>();
        Stack<Character>operator=new Stack<>();
        
           int ans=0;
          // here take sum var to store the total value sum.
           String s=str.trim();
        int sum=0;
        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            
            if(digit(ch))
            {
                   int val=0;
                while(i<s.length() && digit(s.charAt(i))==true)
                {
                    val=val*10+(int)(s.charAt(i)-'0');
                    i++;
                }
               if(i==s.length())                
               {
                   operand.push(val);
               }
                operand.push(val);
                
                if(operator.size()!=0 && operand.size()>=2)
                {
                    int v2=operand.pop();
                    int v1=operand.pop();
                    char optr=operator.pop();                    
                    ans =calculates(ch,v1,v2);
                }
                else if(isoperator(s.charAt(i)))
                {
                    operator.push(s.charAt(i));                   
                }
                else
                {
                    continue;
                }
            }
        }           
            
           for(int i=0;i<operand.size();i++)
           {
               sum+=operand.pop();
           }
           return sum;
    }
}

=========================================

leetcode 227

class Solution {   
         public static boolean isoptr(char ch) {
        if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            return true;
        } else {
            return false;
        }
    }

    public static int calculate(int v1, int v2, char optr) {
        if (optr == '+') {
            return v1 + v2;
        } else if (optr == '-') {
            return v1 - v2;
        } else if (optr == '*') {
            return v1 * v2;
        } else if (optr == '/') {
            return v1 / v2;
        }
        return 0;
    }

    public static int priority(char ch) {
        if (ch == '*' || ch == '/') {
            return 2;
        } else if (ch == '+' || ch == '-') {
            return 1;
        } else {
            return 0;
        }
    }
     public int calculate(String s) {
         
        Stack<Character> operator = new Stack<Character>();
        Stack<Integer> operand = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            if(ch >= '0' && ch <= '9') {              
                
                operand.push(ch-'0');
            } 
             else if (isoptr(ch) == true) {               

                while (operator.size() != 0 && priority(ch) <= priority(operator.peek())) {         
                    char optr = operator.pop();

                    int v2 = operand.pop();
                    int v1 = operand.pop();

                    int ans = calculate(v1, v2, optr);

                    operand.push(ans);
                }
                
                operator.push(ch);
            }
                  
        }
            while (operator.size() != 0) {
                char optr = operator.pop(); // +-x/
                int v2 = operand.pop();
                int v1 = operand.pop();
                int ans = calculate(v1, v2, optr);    
                
                operand.push(ans);
            }
         return operand.peek();
    }
}



